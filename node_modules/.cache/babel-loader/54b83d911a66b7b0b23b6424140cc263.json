{"ast":null,"code":"var _jsxFileName = \"/Users/bujidefeng/Desktop/\\u524D\\u7AEF/react-demo/react_basic/15_Todo list/todolist/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Footer from './components/Footer';\nimport Header from './components/Header';\nimport List from './components/List';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      todos: [{\n        id: '001',\n        name: '吃饭',\n        done: true\n      }, {\n        id: '002',\n        name: '睡觉',\n        done: true\n      }, {\n        id: '003',\n        name: '打游戏',\n        done: false\n      }, {\n        id: '004',\n        name: '放屁',\n        done: false\n      }, {\n        id: '005',\n        name: '跳舞',\n        done: true\n      }]\n    };\n\n    this.addTodo = todoObj => {\n      // 获取原todos\n      const {\n        todos\n      } = this.state; // 追加list\n\n      const newTodos = [todoObj, ...todos]; // 更新状态\n\n      this.setState({\n        todos: newTodos\n      });\n    };\n\n    this.changeTodo = (id, done) => {\n      // 获取状态中的todo说、\n      const {\n        todos\n      } = this.state; // 匹配数据，处理数据\n\n      const newTodos = todos.map(todoObj => {\n        if (todoObj.id === id) return { ...todoObj,\n          done\n        };else return todoObj;\n      });\n      this.setState({\n        todos: newTodos\n      });\n    };\n\n    this.deleteTodo = id => {\n      // 获取原来的todo\n      const {\n        todos\n      } = this.state; //删除指定id元素. filter数组方法过滤\n\n      const newTodos = todos.filter(todoObj => {\n        // 把在Item组件点击到删除按钮所在的id做对比，将 除了点击的排除在外，剩下的返回回去\n        return todoObj.id !== id;\n      }); // 更新状态\n\n      this.setState({\n        todos: newTodos\n      });\n    };\n\n    this.checkAll = () => {\n      const {\n        todos\n      } = this.state;\n      todos.map(todoObj => {\n        return { ...todos,\n          done: true\n        };\n      });\n    };\n  }\n\n  render() {\n    const {\n      todos\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todo-wrap\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          addTodo: this.addTodo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          todos: todos,\n          changeTodo: this.changeTodo,\n          deleteTodo: this.deleteTodo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {\n          todos: todos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["/Users/bujidefeng/Desktop/前端/react-demo/react_basic/15_Todo list/todolist/src/App.js"],"names":["React","Component","Footer","Header","List","App","state","todos","id","name","done","addTodo","todoObj","newTodos","setState","changeTodo","map","deleteTodo","filter","checkAll","render"],"mappings":"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","sourcesContent":["import React,{Component} from 'react';\nimport './App.css'\nimport Footer from './components/Footer';\nimport Header from './components/Header'\nimport List from './components/List'\n\nexport default class App extends Component {\n  // 状态在哪里，操作状态的方法就在哪里\n\n    // 初始化状态\n  state = {\n    todos: [\n      {id:'001',name:'吃饭',done:true},\n      {id:'002',name:'睡觉',done:true},\n      {id:'003',name:'打游戏',done:false},\n      {id:'004',name:'放屁',done:false},\n      {id:'005',name:'跳舞',done:true},\n    ]\n  }\n\n  // addTodo用于添加一个todo，接收的参数是todo对象,todoObj是Header组件传递过来的新的list\n  addTodo = (todoObj) => {\n    // 获取原todos\n    const {todos} = this.state\n    // 追加list\n    const newTodos = [todoObj,...todos]\n    // 更新状态\n    this.setState({todos: newTodos})\n  }\n\n  // 更新todo对象.   id和done是参数，从list 传递过来的参数\n  changeTodo = (id,done)=> {\n    // 获取状态中的todo说、\n    const {todos} = this.state\n    // 匹配数据，处理数据\n    const newTodos = todos.map((todoObj)=>{\n      if(todoObj.id === id) return {...todoObj,done}\n      else return todoObj\n    })\n    this.setState({todos:newTodos})\n  }\n\n  // 删除todo\n  deleteTodo = (id) => {\n    // 获取原来的todo\n    const {todos} = this.state;\n    //删除指定id元素. filter数组方法过滤\n    const newTodos = todos.filter((todoObj)=>{\n      // 把在Item组件点击到删除按钮所在的id做对比，将 除了点击的排除在外，剩下的返回回去\n      return todoObj.id !== id\n    })\n    // 更新状态\n    this.setState({todos: newTodos})\n  }\n\n  checkAll = ()=> {\n    const {todos} = this.state\n    todos.map(todoObj => {return {...todos,done:true}})\n  }\n\n\n  render() {\n    const {todos} = this.state\n    return (\n      <div className='todo-container'>\n      <div className='todo-wrap'>\n        <Header addTodo={this.addTodo}/>\n        <List todos={todos} changeTodo={this.changeTodo} deleteTodo={this.deleteTodo}/>\n        <Footer todos={todos}/>\n      </div>\n    </div>\n    )\n  }\n}\n\n"]},"metadata":{},"sourceType":"module"}